package com.sideproj.protrack;

import java.util.ArrayList;
import java.util.Date;

/**
 * This class is used to store information about a job Specifically the name,
 * employer, position available and other pertinent information like clock
 * in/out
 */

public class JobEntry {
	private int ID; // the id is used to reference specific jobs based
					// on the order they were added

	private String name; // Job name
	private String pos; // position
	private String emp; // employer
	private String des; // description of the job (overall)

	private ArrayList<TimeEntry> workTimeList; // holds a list of time entries
												// that each have
	// information about them

	private double overHours = 40.0; // overtime hours limit, ie- definition for
										// what
										// overtime entails

	/**
	 * JobEntry(int,String,String) Overloaded constructors: calls
	 * JobEntry(int,String,String,null)
	 * 
	 * @param id
	 *            : int - gives a unique ID of the job
	 * @param name
	 *            : String - stores the name of the company
	 * @param pos
	 *            : String - stores the user's position at name
	 */
	public JobEntry(int id, String name, String pos) {
		this(id, name, pos, null);
	}

	/**
	 * JobEntry(int,String,String,String) Overloaded constructors: calls
	 * JobEntry(int,String,String,String,null)
	 * 
	 * @param id
	 *            : int - gives a unique ID of the job
	 * @param name
	 *            : String - stores the name of the company
	 * @param pos
	 *            : String - stores the user's position at name
	 * @param emp
	 *            : String - stores the name of the user's boss (ie- who the
	 *            user "answers" to regarding their hours)
	 */
	public JobEntry(int id, String name, String pos, String emp) {
		this(id, name, pos, emp, null);
	}

	/**
	 * 
	 * @param id
	 *            : int - gives a unique ID of the job
	 * @param name
	 *            : String - stores the name of the company
	 * @param pos
	 *            : String - user's position at name
	 * @param emp
	 *            : String - name of the user's boss (ie- who the user "answers"
	 *            to regarding their hours)
	 * @param des
	 *            : String - job description
	 */
	public JobEntry(int id, String name, String pos, String emp, String des) {
		ID = id;
		this.name = name;
		this.pos = pos;
		if (emp != null)
			this.emp = emp;
		if (des != null)
			this.des = des;
		workTimeList = new ArrayList<TimeEntry>(0);
	}

	// //////////////////Generic Methods/////////////////////////////////
	public void addTimeEntry(Date in) {
		workTimeList.add(new TimeEntry(in));
	}

	public void addTimeEntry(Date in, Date out) {
		workTimeList.add(new TimeEntry(in, out));
	}

	protected void sortWorkTimeList() {
		ArrayList<TimeEntry> sorted = new ArrayList<TimeEntry>(0);
		ArrayList<TimeEntry> temp = workTimeList;
		// Sort based on time/date of clock in time
		int i = sorted.size();
		int max = workTimeList.size();
		int k = 0;
		TimeEntry lastSmallest = temp.get(0);
		while (k < max) {
			if (sorted.get(i).compareTo(temp.get(i + 1)) == -1) {
				lastSmallest = workTimeList.get(i + 1);

			}

		}

	}

	public void validateWorkTimeList() {
		sortWorkTimeList();
		// after the list is sorted make sure that consecutive clock in/out
		// times do not over lap
		if (workTimeList.size() > 1) {
			for (int i = 0; i < workTimeList.size() - 1; i++) {
				if (!workTimeList.get(i).getOut()
						.before(workTimeList.get(i + 1).getIn()))
					System.err.println("overlapping clock in/outs");
			}
		}
	}

	// ///////////////GETS & SETS////////////////////////////////////////

	/**
	 * Get's this job's unique autogenerated ID
	 * 
	 * @return ID
	 */
	public int getID() {
		return ID;
	}

	/**
	 * String getName()
	 * 
	 * @return name: String - the name of the Company
	 */
	public String getName() {
		return name;
	}

	/**
	 * Use to edit the company's name
	 * 
	 * @param name
	 *            : String - must be a character array of length > 0 containing
	 *            the new company name
	 */
	public void setName(String name) {
		if (name != null && !name.isEmpty())
			this.name = name;
		else
			System.err.println("ERR in JobEntry ID:" + ID
					+ " - Cannot replace name with an empty or null string!");
	}

	/**
	 * @return
	 */
	public String getPos() {
		return pos;
	}

	/**
	 * @param pos
	 */
	public void setPos(String pos) {
		if (pos != null && !pos.isEmpty())
			this.pos = pos;
		else
			System.err
					.println("ERR in JobEntry ID:"
							+ ID
							+ " - Cannot replace position with an empty or null string!");
	}

	/**
	 * @return
	 */
	public String getEmp() {
		return emp;
	}

	/**
	 * @param emp
	 */
	public void setEmp(String emp) {
		this.emp = emp;
	}

	/**
	 * @return
	 */
	public String getDes() {
		return des;
	}

	/**
	 * @param des
	 */
	public void setDes(String des) {
		this.des = des;
	}

	/**
	 * @return
	 */
	public double getOverHours() {
		return overHours;
	}

	/**
	 * @param overHours
	 */
	public void setOverHours(double overHours) {
		this.overHours = overHours;
	}

}
